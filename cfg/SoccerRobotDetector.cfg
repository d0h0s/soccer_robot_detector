#!/usr/bin/env python
PACKAGE = "soccer_robot_detector"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Circle detection parameters
gen.add("use_hough_circle", bool_t, 0, "Use Hough circle detector", True)
gen.add("dp", double_t, 0, "Inverse ratio of accumulator resolution", 1.2, 0.1, 5.0)
gen.add("minDist", double_t, 0, "Minimum distance between circle centers", 50.0, 10.0, 400.0)
gen.add("param1", double_t, 0, "Canny upper threshold for HoughCircles", 100.0, 10.0, 400.0)
gen.add("param2", double_t, 0, "Accumulator threshold for circle centers", 30.0, 5.0, 200.0)
gen.add("minRadius", int_t, 0, "Minimum circle radius", 30, 5, 400)
gen.add("maxRadius", int_t, 0, "Maximum circle radius", 200, 10, 800)
gen.add("roi_padding_scale", double_t, 0, "Padding scale for ROI around detected circle", 0.15, 0.0, 1.0)
gen.add("median_blur_kernel_size", int_t, 0, "Median blur kernel size for preprocessing", 5, 3, 21)

# Corner detection parameters
gen.add("use_harris", bool_t, 0, "Use Harris corner detector", True)
gen.add("maxCorners", int_t, 0, "Maximum number of corners", 50, 1, 500)
gen.add("qualityLevel", double_t, 0, "Quality level for Shi-Tomasi corners", 0.02, 0.001, 0.2)
gen.add("minCornerDistance", double_t, 0, "Minimum distance between corners", 10.0, 1.0, 100.0)

# Line detection parameters
gen.add("hough_rho", double_t, 0, "Distance resolution for HoughLinesP", 1.0, 0.1, 5.0)
gen.add("hough_theta", double_t, 0, "Angular resolution (degrees) for HoughLinesP", 1.0, 0.1, 10.0)
gen.add("hough_threshold", int_t, 0, "HoughLinesP accumulator threshold", 50, 1, 500)
gen.add("minLineLength", double_t, 0, "Minimum line length for HoughLinesP", 30.0, 1.0, 500.0)
gen.add("maxLineGap", double_t, 0, "Maximum line gap for HoughLinesP", 10.0, 0.0, 200.0)
gen.add("line_hough_threshold_extra", double_t, 0, "Additional threshold added to HoughLinesP", 30.0, 0.0, 300.0)
gen.add("line_min_length_extra", double_t, 0, "Additional line length added to HoughLinesP", 30.0, 0.0, 300.0)
gen.add("line_max_gap_scale", double_t, 0, "Scale applied to HoughLinesP max gap", 0.5, 0.0, 2.0)
gen.add("line_length_min_px", double_t, 0, "Minimum accepted line length in pixels", 30.0, 0.0, 500.0)
gen.add("line_length_max_radius_ratio", double_t, 0, "Maximum accepted line length relative to radius", 1.3, 0.1, 5.0)
gen.add("line_midpoint_max_radius_ratio", double_t, 0, "Maximum midpoint distance relative to radius", 0.85, 0.1, 2.0)
gen.add("line_angle_min_deg", double_t, 0, "Minimum allowed line angle", 15.0, 0.0, 90.0)
gen.add("line_angle_max_deg", double_t, 0, "Maximum allowed line angle", 165.0, 90.0, 180.0)
gen.add("line_intensity_diff_min", double_t, 0, "Minimum intensity difference along line", 30.0, 0.0, 255.0)

# ROI edge processing parameters
gen.add("roi_canny_low_min", double_t, 0, "Minimum lower threshold for ROI Canny", 50.0, 0.0, 200.0)
gen.add("roi_canny_low_base", double_t, 0, "Base value for adaptive ROI Canny lower threshold", 120.0, 0.0, 400.0)
gen.add("roi_canny_low_mean_scale", double_t, 0, "Scale for mean intensity contribution to ROI Canny lower threshold", 0.5, 0.0, 2.0)
gen.add("roi_canny_high_ratio", double_t, 0, "Multiplier for ROI Canny high threshold", 2.5, 1.0, 5.0)
gen.add("roi_edge_dilation_iterations", int_t, 0, "Iterations for ROI edge dilation", 1, 0, 5)

# Arc detection parameters
gen.add("min_arc_points", int_t, 0, "Minimum number of points in arc contour", 80, 5, 2000)
gen.add("arc_max_fit_error", double_t, 0, "Maximum distance error for arc fitting", 8.0, 0.0, 50.0)
gen.add("arc_min_coverage_deg", double_t, 0, "Minimum angular coverage for arc", 80.0, 0.0, 360.0)
gen.add("arc_blur_kernel_size", int_t, 0, "Gaussian blur kernel size for arc detection", 5, 3, 31)
gen.add("arc_canny_low", double_t, 0, "Lower threshold for arc Canny", 60.0, 0.0, 400.0)
gen.add("arc_canny_high", double_t, 0, "Upper threshold for arc Canny", 150.0, 0.0, 500.0)
gen.add("arc_dilate_iterations", int_t, 0, "Dilate iterations for arc edges", 1, 0, 10)
gen.add("arc_approx_poly_epsilon", double_t, 0, "ApproxPolyDP epsilon for arc contour", 2.0, 0.0, 20.0)
gen.add("arc_score_error_weight", double_t, 0, "Weight applied to mean error in arc scoring", 5.0, 0.0, 50.0)

# Soccer pattern priors
gen.add("short_length_ratio_min", double_t, 0, "Short line min length ratio", 0.25, 0.0, 1.0)
gen.add("short_length_ratio_max", double_t, 0, "Short line max length ratio", 0.55, 0.0, 2.0)
gen.add("long_length_ratio_min", double_t, 0, "Long line min length ratio", 0.55, 0.0, 2.0)
gen.add("long_length_ratio_max", double_t, 0, "Long line max length ratio", 0.95, 0.0, 3.0)
gen.add("thin_thickness_min", double_t, 0, "Minimum thickness for short lines", 1.0, 0.0, 20.0)
gen.add("thin_thickness_max", double_t, 0, "Maximum thickness for short lines", 3.0, 0.0, 20.0)
gen.add("thick_thickness_min", double_t, 0, "Minimum thickness for long lines", 3.0, 0.0, 20.0)
gen.add("thick_thickness_max", double_t, 0, "Maximum thickness for long lines", 6.0, 0.0, 30.0)
gen.add("thickness_search_radius", int_t, 0, "Search radius for line thickness estimation", 8, 1, 50)

# Arc visualization toggles
gen.add("arc_visualize_blur", bool_t, 0, "Publish blurred image for arc detection", False)
gen.add("arc_visualize_edges", bool_t, 0, "Publish Canny edges for arc detection", False)
gen.add("arc_visualize_dilated_edges", bool_t, 0, "Publish dilated edges for arc detection", False)
gen.add("arc_visualize_contours", bool_t, 0, "Publish contour visualization for arc detection", False)

exit(gen.generate(PACKAGE, "soccer_robot_detector", "SoccerRobotDetector"))
